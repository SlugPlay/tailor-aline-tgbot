import asyncio
import logging
import json
import db
import re

from typing import Callable, Any, Awaitable, Union
from aiogram import Bot, Dispatcher, types, fsm, filters, F, BaseMiddleware
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, Message, InputMediaPhoto, InputMedia, ContentType


file = open('bot_token.json', 'r')
data = json.load(file).get('token')
bot = Bot(token=str(data))
acsess_files = ['image/jpg', 'image/jpeg', 'image/png']
admin_users = ['+79140043418']

def check(text, type):
    if type == 'lang':
        regex = "^[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+$"
        pattern = re.compile(regex)
        return pattern.search(text) is not None
    if type == 'num':
        return text.isdigit()

# --------------------------------------------- photo-------------------------------------------
photo_1 = FSInputFile("photo_bot/–í—ã—Å–æ—Ç–∞ –±–µ–¥–µ—Ä.jpg")
photo_2 = FSInputFile("photo_bot/–í—ã—Å–æ—Ç–∞ –≥—Ä—É–¥–∏.jpg")
photo_3 = FSInputFile("photo_bot/–í—ã—Å–æ—Ç–∞ –ø–µ—Ä–µ–¥–∞ –¥–æ —Ç–∞–ª–∏–∏.jpg")
photo_4 = FSInputFile("photo_bot/–í—ã—Å–æ—Ç–∞ —Å–∏–¥–µ–Ω—å—è.jpg")
photo_5 = FSInputFile("photo_bot/–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (–Ω–∏–∑)(1).jpg")
photo_6 = FSInputFile("photo_bot/–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è (–Ω–∏–∑).jpg")
photo_7 = FSInputFile("photo_bot/–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è_.jpg")
photo_8 = FSInputFile("photo_bot/–î–ª–∏–Ω–∞ —Å–ø–∏–Ω—ã –¥–æ —Ç–∞–ª–∏–∏.jpg")
photo_9 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä.jpg")
photo_10 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ 1.jpg")
photo_11 = FSInputFile("photo_bot/–®–∏—Ä–∏–Ω–∞ —Å–ø–∏–Ω—ã.jpg")
photo_12 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ 2.jpg")
photo_13 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ 3.jpg")
photo_14 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç –∑–∞–ø—è—Å—Ç—å—è.jpg")
photo_15 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç –ø–ª–µ—á–∞.jpg")
photo_16 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏.jpg")
photo_17 = FSInputFile("photo_bot/–û–±—Ö–≤–∞—Ç —à–µ–∏.jpg")
photo_18 = FSInputFile("photo_bot/–¶–µ–Ω—Ç—Ä –≥—Ä—É–¥–∏.jpg")
photo_19 = FSInputFile("photo_bot/–®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á–∞_.jpg")
photo_20 = FSInputFile("photo_bot/–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞.jpg")
# --------------------------------------------- photo-------------------------------------------
flag1 = ''

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
recInformation = ''


class UserState(StatesGroup):
    centr = State()
    newUser = State()
    ageUser = State()
    admin = State()


mes = [0]


class UserSize(StatesGroup):
    step1 = State()
    step2 = State()
    step3 = State()
    step3_5 = State()
    step4 = State()
    step5 = State()
    step6 = State()
    step7 = State()
    step8 = State()
    step9 = State()
    step10 = State()
    step11 = State()
    step12 = State()
    step13 = State()
    step14 = State()
    step15 = State()
    step16 = State()
    step17 = State()
    step18 = State()
    step19 = State()
    step20 = State()
    step21 = State()
    step22 = State()
    step23 = State()
    step24 = State()
    step25 = State()
    step26 = State()
    step27 = State()
    step28 = State()
    step29 = State()
    step30 = State()


class UserReg(StatesGroup):
    name = State()
    lastName = State()
    age = State()
    region = State()
    regionAnother = State()
    clothingSize = State()
    photoFront = State()
    photoBack = State()
    photoProfile = State()


class UserAdmin(StatesGroup):
    menu = State()


class UserMenu(StatesGroup):
    menu = State()
    meneg = State()
    registration_again = State()
    underSkirt = State()
    underTrousers = State()
    top = State()
    orderTopVse = State()
    orderSkirt = State()
    orderTrousers = State()
    orderUnderTrousers = State()
    orderUnderSkirt = State()
    orderTop = State()


class SomeMiddleware(BaseMiddleware):
    album_data: dict = {}

    def __init__(self, latency: Union[int, float] = 0.01):
        self.latency = latency

    async def __call__(
            self,
            handler: Callable[[Message, dict[str, Any]], Awaitable[Any]],
            message: Message,
            data: dict[str, Any]
    ) -> Any:
        if not message.media_group_id:
            await handler(message, data)
            return
        try:
            self.album_data[message.media_group_id].append(message)
        except KeyError:
            self.album_data[message.media_group_id] = [message]
            await asyncio.sleep(self.latency)

            data['_is_last'] = True
            data["album"] = self.album_data[message.media_group_id]
            await handler(message, data)

        if message.media_group_id and data.get("_is_last"):
            del self.album_data[message.media_group_id]
            del data['_is_last']


dp.message.middleware(SomeMiddleware())


# --------------------------------------------- —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–ª–∏–≥–æ–Ω -------------------------------------------------------------------------------------
# -----------------(–ø—É—Å–∫–∞–π –∑–¥–µ—Å—å –ø–æ–≤–∏—Å–∏—Ç, —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ç—å –≤—Å—è–∫–∏–µ —à—Ç—É–∫–∏ (—è —É–∂–µ –ø–æ—Ç–µ—Å—Ç–∏—Ç–ª, –µ—Å–ª–∏ –Ω–∞–¥–æ –∑–∞–±–∏—Ä–∞–π)) -------------------------------------------

class UserTest(StatesGroup):
    test1 = State()
    test2 = State()

@dp.message(Command('test'))
async def user_test(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª')
    await message.answer(str(message.message_id))
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª2')
    await message.answer(str(message.message_id))
    await bot.forward_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=message.message_id)
    await state.set_state(UserTest.test1)


@dp.message(StateFilter(UserTest.test1))
async def reg(message: types.Message, state: FSMContext):
    await message.answer(str(message.message_id))
    await message.answer('–ø–æ–¥—Ö–æ–¥–∏—Ç')
    await message.answer(str(message.message_id))
    await bot.forward_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=message.message_id)
    await state.set_state(UserTest.test1)

# --------------------------------------------- —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–ª–∏–≥–æ–Ω -------------------------------------------------------------------------------------
# -----------------(–ø—É—Å–∫–∞–π –∑–¥–µ—Å—å –ø–æ–≤–∏—Å–∏—Ç, —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ç—å –≤—Å—è–∫–∏–µ —à—Ç—É–∫–∏ (—è —É–∂–µ –ø–æ—Ç–µ—Å—Ç–∏—Ç–ª, –µ—Å–ª–∏ –Ω–∞–¥–æ –∑–∞–±–∏—Ä–∞–π)) -------------------------------------------

# --------------------------------------------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -------------------------------------------
@dp.message(Command('start'))
async def user_start(message: types.Message, state: FSMContext):
    await db.create_db()
    kb = [
            [types.KeyboardButton(text="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],

        ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
    nomer = await message.answer('–ü—Ä–æ—Å–∏–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)
    await state.set_state(UserState.centr)

@dp.message(StateFilter(UserState.centr))
async def user_start(message: types.Message, state: FSMContext):
    global user_info, all_user_data, global_phone_number

    user_info = []
    global_phone_number = str(message.contact.phone_number)
    if global_phone_number in admin_users:
        status_user = db.check_admin(global_phone_number)
        if status_user[0] == 'ageUser':
            vr_all_user_data = db.get_user(global_phone_number)
            await db.edit_profile(user_id=vr_all_user_data[0], phone=global_phone_number, status='admin', first_name=vr_all_user_data[2], last_name=vr_all_user_data[3], age=vr_all_user_data[4], region=vr_all_user_data[5], size=vr_all_user_data[6], photo_front=vr_all_user_data[7], photo_back=vr_all_user_data[8], photo_profile=vr_all_user_data[9])
    data_users = await db.get_phone_status()
    flag1 = 'newUser'
    for i in range(len(data_users)):
        if global_phone_number == str(data_users[i][0]):
            flag1 = str(data_users[i][1])
    if flag1 == 'newUser':
        user_info.append(int(message.chat.id))
        user_info.append(global_phone_number)
        await db.create_profile(user_info[0], user_info[1], 'newUser')
        user_info.append('ageUser')
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        await state.set_state(UserState.newUser)
    elif flag1 == 'ageUser':
        await state.set_state(UserState.ageUser)
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        all_user_data = db.get_user(global_phone_number)
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name}'.format(first_name=all_user_data[2]), reply_markup=keyboard)
    elif flag1 == 'admin':
        all_user_data = db.get_user(global_phone_number)
        kb = [
            [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [types.KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [types.KeyboardButton(text="–í –º–µ–Ω—é")]

        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...\n–±–∏–ø-–±—É–ø-–±–∏–ø", reply_markup=keyboard)
        await state.set_state(UserState.admin)


@dp.message(StateFilter(UserState.newUser))
async def reg(message: types.Message, state: FSMContext):
    if check(str(message.text), 'lang'):
        user_info.append(str(message.text))
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
        await state.set_state(UserReg.lastName)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserState.newUser)

@dp.message(StateFilter(UserReg.lastName))
async def reg(message: types.Message, state: FSMContext):
    if check(str(message.text), 'lang'):
        user_info.append(str(message.text))
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        await state.set_state(UserReg.age)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserReg.lastName)


@dp.message(StateFilter(UserReg.age))
async def regRegio(message: types.Message, state: FSMContext):
    if check(str(message.text), 'num'):
        user_info.append(str(message.text))
        kb = [
            [types.KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"), types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞")],
            [types.KeyboardButton(text="–î—Ä—É–≥–æ–π")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω", reply_markup=keyboard)
        await state.set_state(UserReg.regionAnother)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserReg.age)


@dp.message(StateFilter(UserReg.regionAnother))
async def reg(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–¥—Ä—É–≥–æ–π':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserReg.regionAnother)
    else:
        user_info.append(str(message.text))
        kb = [
            [types.KeyboardButton(text="40"), types.KeyboardButton(text="41"),
             types.KeyboardButton(text="42"), types.KeyboardButton(text="43")],
            [types.KeyboardButton(text="44"), types.KeyboardButton(text="45"),
             types.KeyboardButton(text="46"), types.KeyboardButton(text="47")],
            [types.KeyboardButton(text="48"), types.KeyboardButton(text="49"),
             types.KeyboardButton(text="50"), types.KeyboardButton(text="51")],
            [types.KeyboardButton(text="52"), types.KeyboardButton(text="53"),
             types.KeyboardButton(text="54"), types.KeyboardButton(text="55"), types.KeyboardButton(text="55")]

        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã –≤—ã –Ω–æ—Å–∏—Ç–µ?", reply_markup=keyboard)
        await state.set_state(UserReg.clothingSize)


@dp.message(StateFilter(UserReg.clothingSize))
async def reg(message: types.Message, state: FSMContext):
    user_info.append(str(message.text))
    kb = [
        [types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏', reply_markup=keyboard)
    await state.set_state(UserReg.photoFront)


@dp.message(StateFilter(UserReg.photoFront))
async def reg(message: types.Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        user_info.append(str(file_id) + '/pic')
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–∑–∞–¥–∏')
        await state.set_state(UserReg.photoBack)
    elif message.document:
        if str(message.document.mime_type) in acsess_files:
            file_id = message.document.file_id
            user_info.append(str(file_id) + '/doc')
            await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–∑–∞–¥–∏')
            await state.set_state(UserReg.photoBack)
        else:
            await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
            await state.set_state(UserReg.photoFront)
    elif str(message.text).lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        user_info.append('')
        kb = [
            [types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–∑–∞–¥–∏', reply_markup=keyboard)
        await state.set_state(UserReg.photoBack)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        await state.set_state(UserReg.photoFront)



@dp.message(StateFilter(UserReg.photoBack))
async def reg(message: types.Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        user_info.append(str(file_id) + '/pic')
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å')
        await state.set_state(UserReg.photoProfile)
    elif message.document:
        if str(message.document.mime_type) in acsess_files:
            file_id = message.document.file_id
            user_info.append(str(file_id) + '/doc')
            await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å')
            await state.set_state(UserReg.photoProfile)
        else:
            await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
            await state.set_state(UserReg.photoBack)
    elif str(message.text).lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        user_info.append('')
        kb = [
            [types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=keyboard)
        await state.set_state(UserReg.photoProfile)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        await state.set_state(UserReg.photoBack)


@dp.message(StateFilter(UserReg.photoProfile))
async def reg(message: types.Message, state: FSMContext):
    global all_user_data

    if message.photo:
        file_id = message.photo[-1].file_id
        user_info.append(str(file_id) + '/pic')
        user_id, phone, status, first_name, last_name, age, region, size, photo_front, photo_back, photo_profile = user_info
        await db.edit_profile(user_id, phone, status, first_name, last_name, age, region, size, photo_front, photo_back,
                          photo_profile)
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],

        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        all_user_data = db.get_user(phone)
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name1}'.format(first_name1=all_user_data[2]), reply_markup=keyboard)
        await state.set_state(UserState.ageUser)
    elif message.document:
        if str(message.document.mime_type) in acsess_files:
            file_id = message.document.file_id
            user_info.append(str(file_id) + '/doc')
            user_id, phone, status, first_name, last_name, age, region, size, photo_front, photo_back, photo_profile = user_info
            await db.edit_profile(user_id, phone, status, first_name, last_name, age, region, size, photo_front, photo_back,
                            photo_profile)
            kb = [
                [types.KeyboardButton(text="–í –º–µ–Ω—é")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            all_user_data = db.get_user(phone)
            await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name1}'.format(first_name1=all_user_data[2]), reply_markup=keyboard)
            await state.set_state(UserState.ageUser)
        else:
            await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
            await state.set_state(UserReg.photoProfile)
    elif str(message.text).lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        user_info.append('')
        user_id, phone, status, first_name, last_name, age, region, size, photo_front, photo_back, photo_profile = user_info
        await db.edit_profile(user_id, phone, status, first_name, last_name, age, region, size, photo_front, photo_back,
                          photo_profile)
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],

        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        all_user_data = db.get_user(phone)
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name1}'.format(first_name1=all_user_data[2]), reply_markup=keyboard)
        await state.set_state(UserState.ageUser)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        await state.set_state(UserReg.photoProfile)


# --------------------------------------------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ------------------------------------
# --------------------------------------------- –∞–¥–º–∏–Ω ------------------------------------
@dp.message(StateFilter(UserState.admin))
async def menu(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–≤ –º–µ–Ω—é':
        kb = [
            [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Ö (–ü–ª–∞—Ç—å–µ, –±–ª—É–∑–∫–∞, –∂–∞–∫–µ—Ç, —Ä—É–±–∞—à–∫–∞)")],
            [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –Æ–±–∫–∞")],
            [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –ë—Ä—é–∫–∏")],
            [types.KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
            [types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ")],
            [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞")]

        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=keyboard)
        await state.set_state(UserMenu.menu)


@dp.message(StateFilter(UserAdmin.menu))
async def menu(message: types.Message, state: FSMContext):
    pass
    

# --------------------------------------------- –∞–¥–º–∏–Ω ------------------------------------
# --------------------------------------------- –º–µ–Ω—é -------------------------------------------
@dp.message(StateFilter(UserState.ageUser))
async def menu(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Ö (–ü–ª–∞—Ç—å–µ, –±–ª—É–∑–∫–∞, –∂–∞–∫–µ—Ç, —Ä—É–±–∞—à–∫–∞)")],
        [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –Æ–±–∫–∞")],
        [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –ë—Ä—é–∫–∏")],
        [types.KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
        [types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ")]

    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=keyboard)
    await state.set_state(UserMenu.menu)


@dp.message(StateFilter(UserMenu.menu))
async def menedq(message: types.Message, state: FSMContext):
    have_user_merki = 'no'
    if str(message.text).lower() == '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã, –∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä',
                             reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserMenu.meneg)
    elif str(message.text).lower() == '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ —é–±–∫–∞':
        if all_user_data[-3]:
            have_user_merki = 'yes'
        if have_user_merki == 'no':
            kb = [
                [types.KeyboardButton(text="–°–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")],

            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer("–î–∞–≤–∞–π—Ç–µ —Å–Ω–∏–º–∏–º —Å –≤–∞—Å –º–µ—Ä–∫–∏", reply_markup=keyboard)
        elif have_user_merki == 'yes':
            kb = [
                [types.KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
        await state.set_state(UserMenu.underSkirt)
    elif str(message.text).lower() == '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –±—Ä—é–∫–∏':
        if all_user_data[-2]:
            have_user_merki = 'yes'
        if have_user_merki == 'no':
            kb = [
                [types.KeyboardButton(text="–°–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")],

            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer("–î–∞–≤–∞–π—Ç–µ —Å–Ω–∏–º–∏–º —Å –≤–∞—Å –º–µ—Ä–∫–∏", reply_markup=keyboard)
        elif have_user_merki == 'yes':
            kb = [
                [types.KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
        await state.set_state(UserMenu.underTrousers)
    elif str(message.text).lower() == '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Ö (–ø–ª–∞—Ç—å–µ, –±–ª—É–∑–∫–∞, –∂–∞–∫–µ—Ç, —Ä—É–±–∞—à–∫–∞)':
        if all_user_data[-1]:
            have_user_merki = 'yes'
        if have_user_merki == 'no':
            kb = [
                [types.KeyboardButton(text="–°–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")]
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer("–î–∞–≤–∞–π—Ç–µ —Å–Ω–∏–º–∏–º —Å –≤–∞—Å –º–µ—Ä–∫–∏", reply_markup=keyboard)
        elif have_user_merki == 'yes':
            kb = [
                [types.KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏")],
                [types.KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
        await state.set_state(UserMenu.top)
    elif str(message.text).lower() == '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ':
        kb = [
            [types.KeyboardButton(text="–î–∞")],
            [types.KeyboardButton(text="–ù–µ—Ç")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
        await message.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ?', reply_markup=keyboard)
        await state.set_state(UserMenu.registration_again)
    elif str(message.text).lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞' and global_phone_number in admin_users:
        kb = [
            [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [types.KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [types.KeyboardButton(text="–í –º–µ–Ω—é")]

        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...\n–±–∏–ø-–±—É–ø-–±–∏–ø", reply_markup=keyboard)
        await state.set_state(UserState.admin)


@dp.message(StateFilter(UserMenu.registration_again))
async def perereg(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–¥–∞':
        db.delete_user(global_phone_number)
        kb = [
            [types.KeyboardButton(text="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
        nomer = await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)
        await state.set_state(UserState.centr)
    else:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –º–µ–Ω—é...")
        kb = [
            [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Ö (–ü–ª–∞—Ç—å–µ, –±–ª—É–∑–∫–∞, –∂–∞–∫–µ—Ç, —Ä—É–±–∞—à–∫–∞)")],
            [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –Æ–±–∫–∞")],
            [types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∏–∑ –ë—Ä—é–∫–∏")],
            [types.KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
            [types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=keyboard)
        await state.set_state(UserMenu.menu)



# --------------------------------------------- –º–µ–Ω—é -------------------------------------------
# --------------------------------------------- –º–µ–Ω–µ–¥–∂–µ—Ä ---------------------------------------
@dp.message(StateFilter(UserMenu.meneg))
async def problem(message: types.Message, state: FSMContext):
    global all_user_data

    admin_data = db.get_admin_data()
    for i in admin_data:
        await bot.send_message(i, "–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä: {}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}\n–ò–º—è: {}\n–§–∞–º–∏–ª–∏—è: {}\n–í–æ–∑—Ä–∞—Å—Ç: {}\n–†–µ–≥–∏–æ–Ω: {}\n–†–∞–∑–º–µ—Ä: {}\n".format(all_user_data[0], all_user_data[1], all_user_data[2], all_user_data[3], all_user_data[4], all_user_data[5], all_user_data[6]))
        if all_user_data[7][:-3] == 'pic':
            await bot.send_photo(i, all_user_data[7][:-4], caption='–§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏:')
        else:
            await bot.send_document(i, all_user_data[7][:-4], caption='–§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏:')
        if all_user_data[8][:-3] == 'pic':
            await bot.send_photo(i, all_user_data[8][:-4], caption='–§–æ—Ç–æ —Å–∑–∞–¥–∏:')
        else:
            await bot.send_document(i, all_user_data[8][:-4], caption='–§–æ—Ç–æ —Å–∑–∞–¥–∏:')
        if all_user_data[9][:-3] == 'pic':
            await bot.send_photo(i, all_user_data[9][:-4], caption='–§–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å:')
        else:
            await bot.send_document(i, all_user_data[9][:-4], caption='–§–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å:')
        await bot.send_message(i, '–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã:')
        await bot.forward_message(i, message.chat.id, message.message_id)
    kb = [
        [types.KeyboardButton(text="–í –º–µ–Ω—é")],

    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer('–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞', reply_markup=keyboard)
    await state.set_state(UserState.ageUser)


# --------------------------------------------- –º–µ–Ω–µ–¥–∂–µ—Ä ---------------------------------------
# --------------------------------------------- –Ω–∏–∑ —é–±–∫–∞ --------------------------------------------
@dp.message(StateFilter(UserMenu.underSkirt))
async def under(message: types.Message, state: FSMContext):
    global merki_skirt

    print(str(message.text))
    if str(message.text).lower() == '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ—Ä–∫–∏':
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserMenu.orderSkirt)
    elif str(message.text).lower() == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä':
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserMenu.orderSkirt)
    elif str(message.text).lower() == '—Å–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏':
        merki_skirt = ''
        kb = [
            [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å")],
            [types.KeyboardButton(text="–ú–µ–Ω—é")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ—Ä—å—Ç–µ —Ñ–∏–≥—É—Ä—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
            reply_markup=keyboard)
        await state.set_state(UserMenu.orderUnderSkirt)


@dp.message(StateFilter(UserMenu.orderUnderSkirt))
async def under(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–º–µ–Ω—é':
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–¢–æ–≥–¥–∞ –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)
    else:
        await message.answer_photo(photo_16, '–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserSize.step1)


@dp.message(StateFilter(UserSize.step1))
async def under(message: types.Message, state: FSMContext):
    global merki_skirt

    if check(str(message.text), 'num'):
        merki_skirt += str(message.text)
        merki_skirt += '/'
        await message.answer_photo(photo_9, '–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä')
        await state.set_state(UserSize.step2)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step1)


@dp.message(StateFilter(UserSize.step2))
async def under(message: types.Message, state: FSMContext):
    global merki_skirt

    if check(str(message.text), 'num'):
        merki_skirt += str(message.text)
        merki_skirt += '/'
        await message.answer_photo(photo_1, '–í—ã—Å–æ—Ç–∞ –±–µ–¥–µ—Ä')
        await state.set_state(UserSize.step3)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step2)


@dp.message(StateFilter(UserSize.step3))
async def under(message: types.Message, state: FSMContext):
    global merki_skirt

    if check(str(message.text), 'num'):
        merki_skirt += str(message.text)
        merki_skirt += '/'
        await message.answer_photo(photo_7, '–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserSize.step3_5)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step3)

@dp.message(StateFilter(UserSize.step3_5))
async def under(message: types.Message, state: FSMContext):
    global merki_skirt

    if check(str(message.text), 'num'):
        merki_skirt += str(message.text)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserSize.step4)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step3_5)


@dp.message(StateFilter(UserSize.step4), F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO, ContentType.DOCUMENT]))
async def under(message: types.Message, state: FSMContext, album: list[Message]):
    global merki_skirt, all_user_data

    flag_unknown_media = False
    media_group = []
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media_group.append(str(file_id) + '/pic')
        elif str(msg.document.mime_type) in acsess_files:
            file_id = msg.document.file_id
            media_group.append(str(file_id) + '/doc')
        else:
            flag_unknown_media = True
    if flag_unknown_media:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        media_group = []
        await state.set_state(UserSize.step4)
    else:
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã')
        db.input_merki(merki_skirt, 'skirt', global_phone_number)
        all_user_data = db.get_user(global_phone_number)
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)


@dp.message(StateFilter(UserMenu.orderSkirt), F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO, ContentType.DOCUMENT]))
async def under(message: types.Message, state: FSMContext, album: list[Message]):
    flag_unknown_media = False
    media_group = []
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media_group.append(str(file_id) + '/pic')
        elif str(msg.document.mime_type) in acsess_files:
            file_id = msg.document.file_id
            media_group.append(str(file_id) + '/doc')
        else:
            flag_unknown_media = True
    if flag_unknown_media:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        media_group = []
        await state.set_state(UserMenu.orderSkirt)
    else:
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã')
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)
    

# --------------------------------------------- –Ω–∏–∑ —é–±–∫–∞ --------------------------------------------
# --------------------------------------------- –Ω–∏–∑ –±—Ä—é–∫–∏ --------------------------------------------
@dp.message(StateFilter(UserMenu.underTrousers))
async def under(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ—Ä–∫–∏':
        global merki_pants

        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserMenu.orderTrousers)
    elif str(message.text).lower() == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä':
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserMenu.orderTrousers)
    elif str(message.text).lower() == '—Å–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏':
        merki_pants = ''
        kb = [
            [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å")],
            [types.KeyboardButton(text="–ú–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ—Ä—å—Ç–µ —Ñ–∏–≥—É—Ä—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
            reply_markup=keyboard)
        await state.set_state(UserMenu.orderUnderTrousers)


@dp.message(StateFilter(UserMenu.orderUnderTrousers))
async def under(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–º–µ–Ω—é':
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–¢–æ–≥–¥–∞ –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)
    else:
        await message.answer_photo(photo_16, '–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserSize.step23)


@dp.message(StateFilter(UserSize.step23))
async def under(message: types.Message, state: FSMContext):
    global merki_pants

    if check(str(message.text), 'num'):
        merki_pants += str(message.text)
        merki_pants += '/'
        await message.answer_photo(photo_9, '–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä')
        await state.set_state(UserSize.step24)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step23)


@dp.message(StateFilter(UserSize.step24))
async def under(message: types.Message, state: FSMContext):
    global merki_pants

    if check(str(message.text), 'num'):
        merki_pants += str(message.text)
        merki_pants += '/'
        await message.answer_photo(photo_1, '–í—ã—Å–æ—Ç–∞ –±–µ–¥–µ—Ä')
        await state.set_state(UserSize.step25)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step24)


@dp.message(StateFilter(UserSize.step25))
async def under(message: types.Message, state: FSMContext):
    global merki_pants

    if check(str(message.text), 'num'):
        merki_pants += str(message.text)
        merki_pants += '/'
        await message.answer_photo(photo_4, '–í—ã—Å–æ—Ç–∞ —Å–∏–¥–µ–Ω—å—è')
        await state.set_state(UserSize.step26)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step25)


@dp.message(StateFilter(UserSize.step26))
async def under(message: types.Message, state: FSMContext):
    global merki_pants

    if check(str(message.text), 'num'):
        merki_pants += str(message.text)
        merki_pants += '/'
        await message.answer_photo(photo_6, '–î–ª–∏–Ω–∞ –±—Ä—é–∫ –ø–æ –±–æ–∫—É')
        await state.set_state(UserSize.step27)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step26)


@dp.message(StateFilter(UserSize.step27))
async def under(message: types.Message, state: FSMContext):
    global merki_pants

    if check(str(message.text), 'num'):
        merki_pants += str(message.text)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserSize.step28)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step27)


@dp.message(StateFilter(UserSize.step28), F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO, ContentType.DOCUMENT]))
async def under(message: types.Message, state: FSMContext, album: list[Message]):
    global merki_pants, all_user_data

    flag_unknown_media = False
    media_group = []
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media_group.append(str(file_id) + '/pic')
        elif str(msg.document.mime_type) in acsess_files:
            file_id = msg.document.file_id
            media_group.append(str(file_id) + '/doc')
        else:
            flag_unknown_media = True
    if flag_unknown_media:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        media_group = []
        await state.set_state(UserSize.step28)
    else:
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã')
        db.input_merki(merki_pants, 'pants', global_phone_number)
        all_user_data = db.get_user(global_phone_number)
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)


@dp.message(StateFilter(UserMenu.orderTrousers), F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO, ContentType.DOCUMENT]))
async def under(message: types.Message, state: FSMContext, album: list[Message]):
    flag_unknown_media = False
    media_group = []
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media_group.append(str(file_id) + '/pic')
        elif str(msg.document.mime_type) in acsess_files:
            file_id = msg.document.file_id
            media_group.append(str(file_id) + '/doc')
        else:
            flag_unknown_media = True
    if flag_unknown_media:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        media_group = []
        await state.set_state(UserMenu.orderTrousers)
    else:
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã')
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
    #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)


# --------------------------------------------- –Ω–∏–∑ –±—Ä—é–∫–∏ --------------------------------------------
# --------------------------------------------- –≤–µ—Ä—Ö -------------------------------------------
@dp.message(StateFilter(UserMenu.top))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    print(str(message.text))
    if str(message.text).lower() == '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ—Ä–∫–∏':
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserMenu.orderTop)
    elif str(message.text).lower() == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä':
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserMenu.orderTop)
    elif str(message.text).lower() == '—Å–¥–µ–ª–∞–µ–º –º–µ—Ä–∫–∏':
        merki_up = ''
        kb = [
            [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å")],
            [types.KeyboardButton(text="–ú–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ—Ä—å—Ç–µ —Ñ–∏–≥—É—Ä—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
            reply_markup=keyboard)
        await state.set_state(UserMenu.orderTopVse)


@dp.message(StateFilter(UserMenu.orderTopVse))
async def under(message: types.Message, state: FSMContext):
    if str(message.text).lower() == '–º–µ–Ω—é':
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–¢–æ–≥–¥–∞ –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)
    else:
        await message.answer_photo(photo_17, '–û–±—Ö–≤–∞—Ç —à–µ–∏', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserSize.step5)


@dp.message(StateFilter(UserSize.step5))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_10, '–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ 1')
        await state.set_state(UserSize.step6)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step5)



@dp.message(StateFilter(UserSize.step6))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_12, '–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ 2')
        await state.set_state(UserSize.step7)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step6)


@dp.message(StateFilter(UserSize.step7))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_13, '–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ 3')
        await state.set_state(UserSize.step8)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step7)


@dp.message(StateFilter(UserSize.step8))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_18, '–¶–µ–Ω—Ç—Ä –≥—Ä—É–¥–∏')
        await state.set_state(UserSize.step9)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step8)


@dp.message(StateFilter(UserSize.step9))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_2, '–í—ã—Å–æ—Ç–∞ –≥—Ä—É–¥–∏')
        await state.set_state(UserSize.step10)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step9)


@dp.message(StateFilter(UserSize.step10))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_19, '–®–∏—Ä–∏–Ω–∞ –ø–ª–µ—á–∞')
        await state.set_state(UserSize.step11)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step10)


@dp.message(StateFilter(UserSize.step11))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_15, '–û–±—Ö–≤–∞—Ç –ø–ª–µ—á–∞')
        await state.set_state(UserSize.step12)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step11)


@dp.message(StateFilter(UserSize.step12))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_14, '–û–±—Ö–≤–∞—Ç –∑–∞–ø—è—Å—Ç—å—è')
        await state.set_state(UserSize.step13)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step12)


@dp.message(StateFilter(UserSize.step13))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_20, '–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞')
        await state.set_state(UserSize.step14)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step13)


@dp.message(StateFilter(UserSize.step14))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_16, '–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏')
        await state.set_state(UserSize.step15)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step14)


@dp.message(StateFilter(UserSize.step15))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_9, '–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä')
        await state.set_state(UserSize.step16)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step15)


@dp.message(StateFilter(UserSize.step16))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_1, '–í—ã—Å–æ—Ç–∞ –±–µ–¥–µ—Ä')
        await state.set_state(UserSize.step17)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step16)


@dp.message(StateFilter(UserSize.step17))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_11, '–®–∏—Ä–∏–Ω–∞ —Å–ø–∏–Ω—ã')
        await state.set_state(UserSize.step18)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step17)


@dp.message(StateFilter(UserSize.step18))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_8, '–î–ª–∏–Ω–∞ —Å–ø–∏–Ω—ã –¥–æ —Ç–∞–ª–∏–∏')
        await state.set_state(UserSize.step19)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step18)


@dp.message(StateFilter(UserSize.step19))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_8, '–î–ª–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞ –¥–æ —Ç–∞–ª–∏–∏')
        await state.set_state(UserSize.step20)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step19)


@dp.message(StateFilter(UserSize.step20))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        merki_up += '/'
        await message.answer_photo(photo_8, '–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserSize.step21)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step20)


@dp.message(StateFilter(UserSize.step21))
async def under(message: types.Message, state: FSMContext):
    global merki_up

    if check(str(message.text), 'num'):
        merki_up += str(message.text)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ-–¥–≤–∞ —Ñ–æ—Ç–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–¥–µ–ª–∏—è')
        await state.set_state(UserSize.step22)
    else:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(UserSize.step21)


@dp.message(StateFilter(UserSize.step22), F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO, ContentType.DOCUMENT]))
async def under(message: types.Message, state: FSMContext, album: list[Message]):
    global merki_up, all_user_data

    flag_unknown_media = False
    media_group = []
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media_group.append(str(file_id) + '/pic')
        elif str(msg.document.mime_type) in acsess_files:
            file_id = msg.document.file_id
            media_group.append(str(file_id) + '/doc')
        else:
            flag_unknown_media = True
    if flag_unknown_media:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        media_group = []
        await state.set_state(UserSize.step22)
    else:
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã')
        merki_up += str(message.text)
        db.input_merki(merki_up, 'up', global_phone_number)
        all_user_data = db.get_user(global_phone_number)
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)


@dp.message(StateFilter(UserMenu.orderTop), F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO, ContentType.DOCUMENT]))
async def under(message: types.Message, state: FSMContext, album: list[Message]):
    flag_unknown_media = False
    media_group = []
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media_group.append(str(file_id) + '/pic')
        elif str(msg.document.mime_type) in acsess_files:
            file_id = msg.document.file_id
            media_group.append(str(file_id) + '/doc')
        else:
            flag_unknown_media = True
    if flag_unknown_media:
        await message.answer('ü•∫–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ –∏–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg/jpeg/png')
        media_group = []
        await state.set_state(UserMenu.orderTop)
    else:
        await message.answer('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã')
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        #–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω—É !!!!!!!!!!!!!
        kb = [
            [types.KeyboardButton(text="–í –º–µ–Ω—é")],
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞.', reply_markup=keyboard)
        await state.set_state(UserState.ageUser)


# --------------------------------------------- –≤–µ—Ä—Ö -------------------------------------------


@dp.message()
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
